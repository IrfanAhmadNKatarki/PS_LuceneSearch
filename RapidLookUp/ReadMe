# RapidLookUp API

## Overview
RapidLookUp API is an orchestration service built with Spring Boot that loads user data from an external dataset ([dummyjson.com/users](https://dummyjson.com/users)) into an in-memory H2 database. It provides RESTful endpoints to:
- **Load** user data from the external API.
- **Search** users via free text search on `firstName`, `lastName`, and `ssn`.
- **Find** a specific user by ID or email.

The project is designed following clean code practices, including:
- **Modular Architecture:** Separate packages for configuration, controllers, services, repositories, entities, and exception handling.
- **Application Logging:** SLF4J logging is integrated for tracking key operations.
- **Exception Handling:** Global exception handling is implemented using `@RestControllerAdvice` and `ResponseStatusException` for standardized error responses.
- **Environment Layering:** Critical configurations (external API URL, database settings, etc.) are externalized in `application.yml`.
- **Input Data Validations:** Basic validations ensure correct input (e.g., minimum 3 characters for search queries).
- **Resilient External API Calls:** Spring Retry is used to optimize and handle transient errors during external API calls.
- **Swagger/OpenAPI Documentation:** The API is fully documented and accessible via Swagger UI.


## How to Build and Run

### Prerequisites
- **Java 17+**
- **Maven**

### Build the Project
Run the following command in the project root:
```bash
mvn clean install

### Run the application
mvn spring-boot:run

###h2 console
http://localhost:8080/h2-console
JDBC URL: jdbc:h2:mem:rapiddb
Username: sa
Password: (leave blank)

###To view the API documentation, navigate to (Swagger)
API Endpoints
Load Users
Endpoint: POST /users/load
Description: Loads user data from the external API into the H2 database.
Response: 200 OK with a success message.
Find User by ID or Email
Endpoint: GET /users/find
Parameters:
id (optional): User ID.
email (optional): User email.
Description: Retrieves a user by ID or email.
Response: 200 OK with the user object, or 404 if not found.
Search Users
Endpoint: GET /users/search
Parameter:
searchText (required, minimum 3 characters): Free text search query.
Description: Performs a free text search on firstName, lastName, and ssn.
Response: 200 OK with a list of matching users, or 400 Bad Request if the query is too short.
Testing
Unit Tests
Unit tests for repository and service layers are provided. For example:

UserRepositoryTest.java: Tests saving a user and finding a user by email.
UserControllerTest.java: Uses MockMvc for integration testing of endpoints.
To run tests, execute:

bash
Copy
Edit
mvn test
Code Coverage
You can generate code coverage reports using the Jacoco Maven plugin.

Externalized Configuration
All critical parameters (external API URL, database settings, etc.) are configured in application.yml.

Future Enhancements
Resilience: Further improve external API resilience using libraries like Resilience4j.
Validation: Enhance input validations using JSR-303 annotations.
Testing: Expand unit and integration test coverage.
Caching: Implement caching for external API calls to optimize performance.